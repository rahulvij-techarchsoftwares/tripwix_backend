"""
Django settings for tripwix_backend project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from datetime import timedelta
from pathlib import Path

from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))
APPLICATION_ROOT = os.path.realpath(os.path.dirname(__file__))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-1_aj3#0j2gbhjeit1u5ohw)tp^ho2x9n#6g4w48v#co50k8^+g"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "modeltrans",  # listed above to support admin model translation
    'import_export',
    "django_admin_kubi",
    "django.contrib.sites",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    # 3rd party apps
    "photologue",
    "sortedm2m",
    "django_celery_beat",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_api_key",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "drf_spectacular",
    "django_filters",
    "corsheaders",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    # project apps,
    "apps.core",
    "apps.experiences",
    "apps.external_apis",
    "apps.hostify",
    "apps.locations",
    "apps.pipedrive",
    "apps.properties",
    "apps.media",
    "apps.users",
    "apps.faqs",
    "apps.leads",
    "apps.blogs",
    # Modules
    "contrib.admin_relation",
    "apps.email",
    "apps.components",
    "apps.component_forms",
    "apps.content",
    "apps.pages",
    'apps.slides',
    'tripwix_backend',
]

SITE_ID = 1

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "tripwix_backend.middleware.AjaxMiddleware",
]

ROOT_URLCONF = "tripwix_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "tripwix_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": os.getenv("POSTGRES_DB", "tripwix_db"),
        "USER": os.getenv("POSTGRES_USER", "tripwix_db"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "tripwix_db"),
        "HOST": os.getenv("DB_HOST", "db"),
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET")


APPLE_CLIENT_ID = os.getenv("APPLE_CLIENT_ID")

ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": os.getenv("GOOGLE_OAUTH_CLIENT_ID"),
            "secret": os.getenv("GOOGLE_OAUTH_CLIENT_SECRET"),
            "key": "",
        },
        "SCOPE": ["profile", "email"],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

# django model translation config
LANGUAGES = (
    ("en", _("English")),
    ("pt", _("Portuguese")),
)

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
)

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Property Settings
PROPERTIES_DEFAULT_LOCATION = 1
PROPERTIES_HIDE_DIVISIONS = True
PROPERTIES_LABELS = {
    "name": "Property number",
    "reference": "Code",
}

PROJECT_URL = "http://0.0.0.0:8000"
MEDIA_URL = PROJECT_URL + "/static/"
MEDIA_ROOT = os.path.join(BASE_DIR, "upload")

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

DATA_UPLOAD_MAX_MEMORY_SIZE = None

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "upload"),
)

ADMIN_MENU = "tripwix_backend.menu.MyAdminMenu"
ENABLE_BACKOFFICE_IMPORT = False

GOOGLE_SECRET_FILE = os.getenv("GOOGLE_SECRET_FILE", "google_secret.json")
GOOGLE_SCOPES = os.getenv(
    "GOOGLE_SCOPES", ["https://www.googleapis.com/auth/drive", "https://www.googleapis.com/auth/spreadsheets"]
)
UPDATE_FILE_ID = os.getenv("UPDATE_FILE_ID", "101kgmPanJEsrAnPZJ4crJwaUxoVJE8jhvJlDPeJ748E")


NOTIFICATION_URL = os.getenv(
    "NOTIFICATION_URL", "https://admin-staging.worldeluxevillas.com/api/v1/properties/notification/"
)

# SALT FOR ENCODING/DECODING HASH KEYS
HASHID_FIELD_SALT = SECRET_KEY
HASHID_FIELD_ALLOW_INT_LOOKUP = False

# REDIS CONFIG
REDIS_HOSTNAME = os.environ.get("REDIS_HOSTNAME", "redis")
REDIS_PORT = os.environ.get("REDIS_PORT", "6379")
REDIS_CACHE_DB = os.environ.get("REDIS_CACHE_DB", "0")
REDIS_BROKER_DB = os.environ.get("REDIS_BROKER_DB", "1")
REDIS_ADDRESS = f"redis://{REDIS_HOSTNAME}:{REDIS_PORT}"

CELERY_BROKER_URL = f"{REDIS_ADDRESS}/{REDIS_BROKER_DB}"
CELERY_TASK_IGNORE_RESULT = True
CELERY_WORKER_DISABLE_RATE_LIMITS = True
# CELERY_TASK_ALWAYS_EAGER = False
# CELERY_TASK_EAGER_PROPAGATES = False
CELERY_TASK_ALWAYS_EAGER = True
CELERY_TASK_EAGER_PROPAGATES = True

CELERY_TASK_DEFAULT_QUEUE = "default"
CELERY_RESULT_BACKEND = f"redis://{REDIS_HOSTNAME}:{REDIS_PORT}/{REDIS_BROKER_DB}"

# CACHES
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": f"{REDIS_ADDRESS}/{REDIS_CACHE_DB}",
        # "OPTIONS": {
        #     "CLIENT_CLASS": "django_redis.client.DefaultClient",
        # },
        "KEY_PREFIX": "tripwix",
    },
}
# Cache time to live is 15 minutes.
CACHE_TTL = 60 * 15

GOOGLE_MAPS_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY", "AIzaSyCaiBk9UnMnyk_uFzMPqEwZL4pPb1uTfQI")

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'apps.core.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework_simplejwt.authentication.JWTAuthentication',),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=360),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'UPDATE_LAST_LOGIN': True,
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Tripwix API',
    'DESCRIPTION': 'Endpoints for Tripwix',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

ADMIN_MENU = "tripwix_backend.menu.MyAdminMenu"
PIPEDRIVE_API_TOKEN = os.getenv("PIPEDRIVE_API_TOKEN", "")
HOSTIFY_API_TOKEN = os.getenv("HOSTIFY_API_TOKEN", "")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'pipedrive_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'pipedrive.log',
            'formatter': 'detailed',
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 2,
        },
    },
    'formatters': {
        'detailed': {'format': '%(asctime)s %(levelname)s %(name)s %(message)s'},
    },
    'loggers': {
        'pipedrive_logger': {
            'handlers': ['pipedrive_handler'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

CURRENCY_UPDATE_INTERVAL = 60 * 60  # 1 hour
SEND_DATA_TO_PIPEDRIVE = True

DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "no-reply@tripwix.com")
FROM_EMAIL = DEFAULT_FROM_EMAIL
DEFAULT_TO_EMAIL = os.getenv("DEFAULT_TO_EMAIL", "admin@tripwix.com")
RECIPIENT_EMAIL = DEFAULT_TO_EMAIL
EMAIL = {"from_email": DEFAULT_FROM_EMAIL}
EMAIL_HOST = os.getenv("EMAIL_HOST", "localhost")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "localhost")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "localhost")
EMAIL_PORT = os.getenv("EMAIL_PORT", "2525")

