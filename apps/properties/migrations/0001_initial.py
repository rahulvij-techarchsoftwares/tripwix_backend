# Generated by Django 4.2.4 on 2023-08-30 06:03

import re
import uuid

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('locations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(blank=True, max_length=180, null=True, verbose_name='Name')),
                ('title', models.CharField(blank=True, help_text='Public Name', max_length=180, null=True, verbose_name='Title')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('reference', models.CharField(max_length=50, unique=True, verbose_name='Reference')),
                ('seo_title', models.CharField(blank=True, help_text='Leave blank to use the default property title.', max_length=70, verbose_name='SEO Title')),
                ('seo_description', models.CharField(blank=True, help_text='Leave blank to use the default property description.', max_length=155, verbose_name='SEO Description')),
                ('slug', models.SlugField(blank=True, unique=True, verbose_name='Url / Handle')),
                ('publication_date', models.DateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, help_text='When the property should go live.', null=True, verbose_name='publication date')),
                ('publication_end_date', models.DateTimeField(blank=True, db_index=True, help_text='When to expire the property. Leave empty to never expire.', null=True, verbose_name='publication end date')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this property should be treated as active. Unselect this instead of deleting properties.', verbose_name='active')),
                ('featured_date', models.DateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, help_text='When the property should go live.', null=True, verbose_name='featured publication date')),
                ('featured_end_date', models.DateTimeField(blank=True, db_index=True, help_text='When to expire the featured property. Leave empty to never expire.', null=True, verbose_name='featured publication end date')),
                ('is_featured', models.BooleanField(blank=True, default=False, help_text='Designates whether this property should be treated as featured.', verbose_name='featured')),
                ('address', models.CharField(blank=True, max_length=250, null=True, verbose_name='Address')),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, serialize=False, spatial_index=False, srid=4326, verbose_name='Coordinates')),
                ('commission', models.DecimalField(blank=True, decimal_places=2, help_text='Not visible for public', max_digits=13, null=True, verbose_name='Commission')),
                ('commission_type', models.CharField(blank=True, choices=[('p', 'Percentage'), ('f', 'Fixed')], default='p', max_length=5, null=True, verbose_name='Commission Rate')),
                ('commission_company', models.CharField(blank=True, max_length=50, null=True, verbose_name='Company Name')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('note', models.TextField(blank=True, help_text='Not visible for public', verbose_name='Note')),
                ('item_o', models.IntegerField(blank=True, default=0, verbose_name='Order')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.location', verbose_name='location')),
            ],
            options={
                'verbose_name': 'Property',
                'verbose_name_plural': 'Propertys',
                'ordering': ('item_o',),
            },
        ),
        migrations.CreateModel(
            name='PropertyBedroomsConfigBedType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('slug', models.SlugField(unique=True, verbose_name='Url / Handle')),
                ('item_o', models.IntegerField(default=0, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Bed Type',
                'verbose_name_plural': 'Bed Types',
                'ordering': ('item_o',),
            },
        ),
        migrations.CreateModel(
            name='PropertyBedroomsConfigType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('slug', models.SlugField(unique=True, verbose_name='Url / Handle')),
                ('item_o', models.IntegerField(default=0, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Bedroom Type',
                'verbose_name_plural': 'Bedroom Types',
                'ordering': ('item_o',),
            },
        ),
        migrations.CreateModel(
            name='PropertyDivisionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('slug', models.SlugField(unique=True, verbose_name='Url / Handle')),
                ('item_o', models.IntegerField(default=0, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Division Type',
                'verbose_name_plural': 'Division Types',
                'ordering': ('item_o',),
            },
        ),
        migrations.CreateModel(
            name='PropertyGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('sale_type', models.CharField(choices=[('o', 'Other'), ('r', 'Rental'), ('s', 'Sale')], default='o', max_length=1, unique=True, verbose_name='Sale type')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('seo_title', models.CharField(blank=True, help_text='Leave blank to use the default title.', max_length=70, verbose_name='SEO Title')),
                ('seo_description', models.CharField(blank=True, help_text='Leave blank to use the default description.', max_length=155, verbose_name='SEO Description')),
                ('seo_keywords', models.CharField(blank=True, help_text='Leave blank to use the default keywords.', max_length=255, verbose_name='SEO Keywords')),
                ('slug', models.SlugField(unique=True, verbose_name='Url / Handle')),
                ('price_ranges', models.CharField(blank=True, default='', help_text='To enable price filtering specify the ranges. eg. 100,200,300.', max_length=160, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='Price Ranges')),
                ('in_search', models.BooleanField(default=False, help_text='Allow this group to be searched', verbose_name='Search-able')),
                ('sort_order_fe', models.CharField(choices=[('ra', 'Random Order'), ('ma', 'Manual Order'), ('ne', 'Newest First'), ('oe', 'Oldest First'), ('na', 'Name (ascending)'), ('nd', 'Name (descending)'), ('pa', 'Price (ascending)'), ('pd', 'Price (descending)')], default='ne', help_text='Initial ordering of properties in the Front-end', max_length=2, verbose_name='Sort order Front-end')),
                ('sort_order_be', models.CharField(choices=[('ra', 'Random Order'), ('ma', 'Manual Order'), ('ne', 'Newest First'), ('oe', 'Oldest First'), ('na', 'Name (ascending)'), ('nd', 'Name (descending)'), ('pa', 'Price (ascending)'), ('pd', 'Price (descending)')], default='ne', help_text='Initial ordering of properties in the Back-end', max_length=2, verbose_name='Sort order Back-end')),
            ],
            options={
                'verbose_name': 'Property Group',
                'verbose_name_plural': 'Property Groups',
                'db_table': 'property_sale_group',
            },
        ),
        migrations.CreateModel(
            name='PropertyOwnership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('slug', models.SlugField(unique=True, verbose_name='Url / Handle')),
                ('item_o', models.IntegerField(default=0, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Ownership',
                'verbose_name_plural': 'Ownerships',
                'ordering': ('item_o', 'name'),
            },
        ),
        migrations.CreateModel(
            name='PropertyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('slug', models.SlugField(unique=True, verbose_name='Url / Handle')),
                ('item_o', models.IntegerField(default=0, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Property Type',
                'verbose_name_plural': 'Property Types',
                'ordering': ('item_o',),
            },
        ),
        migrations.CreateModel(
            name='PropertyTypology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('slug', models.SlugField(unique=True, verbose_name='Url / Handle')),
                ('item_o', models.IntegerField(default=0, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Typology',
                'verbose_name_plural': 'Typologys',
                'ordering': ('name', 'item_o'),
            },
        ),
        migrations.CreateModel(
            name='PropertyDivision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Area')),
                ('description', models.CharField(blank=True, max_length=250, null=True, verbose_name='description')),
                ('division_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='properties.propertydivisiontype')),
                ('property_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='divisions', to='properties.property')),
            ],
            options={
                'verbose_name': 'Division',
                'verbose_name_plural': 'Divisions',
            },
        ),
        migrations.CreateModel(
            name='PropertyBedroomsConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(blank=True, choices=[(None, ''), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=1, null=True, verbose_name='number beds')),
                ('description', models.CharField(blank=True, max_length=250, null=True, verbose_name='description')),
                ('bed_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='properties.propertybedroomsconfigbedtype', verbose_name='type bed')),
                ('bedroom_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='properties.propertybedroomsconfigtype', verbose_name='bedroom name/type')),
                ('property_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bedrooms_configurations', to='properties.property')),
            ],
            options={
                'verbose_name': 'Bedroom Configuration',
                'verbose_name_plural': 'Bedrooms Configuration',
            },
        ),
        migrations.AddField(
            model_name='property',
            name='ownership',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='properties.propertyownership', verbose_name='Ownership'),
        ),
        migrations.AddField(
            model_name='property',
            name='property_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='properties.propertygroup'),
        ),
        migrations.AddField(
            model_name='property',
            name='property_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='properties.propertytype'),
        ),
        migrations.AddField(
            model_name='property',
            name='related',
            field=models.ManyToManyField(blank=True, to='properties.property'),
        ),
        migrations.AddField(
            model_name='property',
            name='sublocation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.sublocation', verbose_name='sub location'),
        ),
        migrations.AddField(
            model_name='property',
            name='typology',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='properties.propertytypology'),
        ),
    ]
